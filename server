import socket
import threading
import pickle

HOST = '0.0.0.0'  # listen on all interfaces
PORT = 5000

clients = []
pixels = {}  # {(x, y): (r, g, b)}

lock = threading.Lock()

def handle_client(conn):
    global pixels
    while True:
        try:
            data = conn.recv(4096)
            if not data:
                break
            x, y, color = pickle.loads(data)
            with lock:
                pixels[(x, y)] = color
            # broadcast to all clients
            for c in clients:
                if c != conn:
                    try:
                        c.sendall(data)
                    except:
                        pass
        except:
            break
    conn.close()
    clients.remove(conn)

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((HOST, PORT))
    s.listen()
    print(f"Server listening on {HOST}:{PORT}")
    while True:
        conn, addr = s.accept()
        clients.append(conn)
        # send current pixels to new client
        with lock:
            for (x, y), color in pixels.items():
                conn.sendall(pickle.dumps((x, y, color)))
        threading.Thread(target=handle_client, args=(conn,), daemon=True).start()

if __name__ == "__main__":
    main()
